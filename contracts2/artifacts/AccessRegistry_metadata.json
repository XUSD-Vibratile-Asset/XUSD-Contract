{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "dom",
						"type": "address"
					},
					{
						"internalType": "enum AccessRegistry.AccessType",
						"name": "class",
						"type": "uint8"
					}
				],
				"name": "AccessIsClass",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "AccessRegistryCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "dom",
						"type": "address"
					}
				],
				"name": "GetAccess",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "Address",
								"type": "address"
							},
							{
								"internalType": "enum AccessRegistry.AccessType",
								"name": "Class",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "Domain",
								"type": "address"
							}
						],
						"internalType": "struct AccessRegistry.Accessor",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "i",
						"type": "uint256"
					}
				],
				"name": "GetAccessByIndex",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "Address",
								"type": "address"
							},
							{
								"internalType": "enum AccessRegistry.AccessType",
								"name": "Class",
								"type": "uint8"
							},
							{
								"internalType": "address",
								"name": "Domain",
								"type": "address"
							}
						],
						"internalType": "struct AccessRegistry.Accessor",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "enum AccessRegistry.AccessType",
						"name": "min",
						"type": "uint8"
					},
					{
						"internalType": "address",
						"name": "dom",
						"type": "address"
					}
				],
				"name": "HasAccess",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "addr",
						"type": "address"
					},
					{
						"internalType": "enum AccessRegistry.AccessType",
						"name": "class",
						"type": "uint8"
					},
					{
						"internalType": "address",
						"name": "dom",
						"type": "address"
					}
				],
				"name": "RegisterAccess",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "dom",
						"type": "address"
					}
				],
				"name": "RemoveAccess",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/AccessRegistry.sol": "AccessRegistry"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 100
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"contracts/AccessRegistry.sol": {
			"keccak256": "0xfe743b78e18db3ddb43f42da4f76b4741ff330c2f8f94f2dea7d4ee09e111fd7",
			"license": "Sharia",
			"urls": [
				"bzz-raw://67d9bf12767ec742201f0ed94834039fb0ebf87e49acd82db8916b5c4d49cf28",
				"dweb:/ipfs/Qmai4QZqZTwc3wT1nC3d1owGer8wXEWhddxVwySxT5obAM"
			]
		},
		"contracts/atropamath.sol": {
			"keccak256": "0x40c04fc6e6870caa6d91fefd2d7f5f1f9fe1d3d60d585e3afd1cc8d892e28291",
			"license": "Sharia",
			"urls": [
				"bzz-raw://3569ae5182334276c9cea393ccc32adc0a51db01e7cf9d20ca1273b7e9d790de",
				"dweb:/ipfs/QmX8NMKWmbYW71qAn1dc2WVqGYDc8rgBTefrBqv84xvX4Y"
			]
		},
		"contracts/registry.sol": {
			"keccak256": "0x2de243fc397b804f42152434e979ab88e432744d228ada062511445c5f18d173",
			"license": "Sharia",
			"urls": [
				"bzz-raw://e791dcd3795c5b9d75f987e9381823be6b580a7aa8223f51709a7791ba420ca6",
				"dweb:/ipfs/QmQ78wzcrtorMPUEjTRxPEFjx8uMPEQveNr7RfbzbvxfHr"
			]
		}
	},
	"version": 1
}