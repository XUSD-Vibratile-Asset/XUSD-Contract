{
	"id": "4d0bc2486c376865fd2777710ada6a57",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/TUSDRegistry.sol": {
				"content": "// // SPDX-License-Identifier: Sharia\n// pragma solidity ^0.8.24;\n\n//  import \"hardhat/console.sol\";\n\n//  import \"./Address.sol\";\n//  import \"./registry.sol\";\n// import \"./ClassRegistry.sol\";\n// import \"./Classes/IClassBase.sol\";\n\n\n\n// import \"./access.sol\";\n\n// /**\n//  * @title TUSDRegistry\n//  * @dev This contract manages fee structures for different classes and their functions,\n//  * allowing for user and class registration, as well as fee retrieval and updates.\n//  */\n//  contract TUSDRegistry is  Ownable {\n//     using Address for address;\n//     using LibRegistry for LibRegistry.Registry;\n//     using AtropaMath for address;\n \n\n//     /// @notice Address used for burning\n//     address public immutable burn = 0x0000000000000000000000000000000000000369;\n\n//     error ArrayLengthMismatch(); // 0xa24a13a6\n//     error FeeAboveMaxLimit(); // 0xd6cf7b5e\n\n//     event ClassFeeRegistered(bytes32 indexed feeId, address indexed classContract, bytes4 indexed functionSig, int256 fee);\n//     event TotalFee(int256 fee);\n\n//     mapping(uint256 => bool) public userList;\n\n//     struct UsersClass {\n//         address[] ClassAddress;\n//     }\n\n \n//     ClassRegistry public classreg;\n//     uint256 public immutable userIndex = 0;\n//     address public XUSD;\n\n//     mapping(uint256 => UsersClass) internal UsersClassList;\n//     mapping(uint256 => bool) internal ClassUserActive;\n//     mapping(uint256 => UsersClass) internal UsersActiveClassList;\n//     mapping(bytes4 => bool) feeRegistry;\n\n//     struct Class1 {     \n//         address classAddress; \n//         int256 basisFee;\n//     }\n\n//     struct UserWithClass {\n//         address callerAddress; \n//         address classAddress;   \n//         bool active;         \n//         int256 basisFee;     \n//     }\n\n//     struct BasisClass {\n//         address callerAddress;   \n//         address toAddress;\n//         address fromAddress;\n//         int basisPoints;\n//         bool stick;\n//         bool unStick;    \n//     }\n//     struct UserTax {\n//         address userAddress;   \n//         int totalBasis;\n//         bool active;\n       \n//     }\n\n\n//     struct ClassTaxes {\n//         address classAddress;  \n//         bool active;   \n//         int basisPoints;    \n//     }\n//     mapping(uint => UserTax)  UserMap;\n\n\n\n//     LibRegistry.Registry internal  RecieverTax;\n//     mapping(uint => ClassTaxes)  ReceverTaxMap;\n\n//     LibRegistry.Registry internal SenderTax;\n//     mapping(uint => ClassTaxes) SenderTaxMap;\n\n//     LibRegistry.Registry internal StakingTax;\n//     mapping(uint => ClassTaxes)  StakingTaxMap;\n\n//     struct BassisActive {\n//         int basisPoints;       \n//         bool active;    \n//     }\n\n//     mapping(int =>   uint) lastClassCount;\n\n//     address private baseClass;\n//     mapping(address =>  bool) internal badAddresses;\n//     mapping(uint =>  IClassBase.ClassTax) internal basisFee;\n \n//     mapping(uint =>  BassisActive) internal activeFees;\n//     LibRegistry.Registry internal UsersClassRegistry;\n\n//     LibRegistry.Registry internal ActiveList;\n//     mapping(uint =>  int) internal activeBasisFee;\n\n\n\n//     mapping(uint => UserWithClass) internal Users;\n\n//     mapping(uint =>  LibRegistry.Registry) internal UsersReg;\n\n\n \n// constructor() {\n//     Ownable(msg.sender);\n// }\n\n\n  \n\n//     function getAllUserClassTaxResults(address user) external view returns(UserWithClass[] memory) {\n//         UserWithClass[] memory userClass = new UserWithClass[](classreg.classRegistryCount());\n//         for (uint256 i = 0; i < classreg.classRegistryCount(); i++) {\n//             uint _hash = classreg.getClassByIndex(i).classAddress.hashWith(user);\n//             userClass[i] = Users[_hash];\n//         }\n//           return userClass;       \n//     }\n\n\n  \n\n\n//     function setSenderTaxCategory(address sender) external {\n//         assert(HasAccess(msg.sender, AccessType.SOLDIER, address(this)));\n//         uint hash = address(this).hashWith(sender);\n//         if(!SenderTax.Contains(hash)) {\n//         SenderTax.Register(hash);\n//         SenderTaxMap[hash].active = true;\n//         SenderTaxMap[hash].basisPoints = IClassBase(sender).getClassBasis();\n//         SenderTaxMap[hash].classAddress = sender;\n//         }\n//     }\n\n\n//     function setReceiverTaxCategory(address receiver) external {\n//         assert(HasAccess(msg.sender, AccessType.SOLDIER, address(this)));\n//         uint hash = address(this).hashWith(receiver);\n//         if(!RecieverTax.Contains(hash)) {\n//         RecieverTax.Register(hash);\n//         ReceverTaxMap[hash].active = true;\n//         ReceverTaxMap[hash].basisPoints = IClassBase(receiver).getClassBasis();\n//         ReceverTaxMap[hash].classAddress = receiver;\n//         }\n//     }\n\n  \n//     function setStakingTaxCategory(address class) external {\n//         assert(HasAccess(msg.sender, AccessType.SOLDIER, address(this)));\n//         uint hash = address(this).hashWith(class);\n//         if(!StakingTax.Contains(hash)) {\n//         StakingTax.Register(hash);\n//         StakingTaxMap[hash].active = true;\n//         StakingTaxMap[hash].basisPoints = IClassBase(class).getClassBasis();\n\n        \n//         }\n//     }\n\n//     /**\n//      * @dev Internal function to calculate the selective tax basis points based on transaction context.\n//      * @param from The sender of the tokens.\n//      * @param to The recipient of the tokens.\n//      * @param caller The address that initiated the transaction.\n//      * @return uint256 The total tax basis points.\n//      */\n//     function _calculateSelectiveTaxBasisPoints(address from, address to, address caller) internal  returns (uint256) {\n//         int256 totalBasisPoints = 0;\n//         uint hashF = address(this).hashWith( from);\n//         uint hashT = address(this).hashWith( to);\n//         uint hashC = address(this).hashWith( caller);\n\n//         // Apply sender-related tax if applicable\n//         if (SenderTax.Contains(hashF) && UserMap[hashF].active) {\n//             uint amountNew = IClassBase(ReceverTaxMap[hashF].classAddress).calculateTaxBasisPoints(from, to, caller);\n//             UserMap[hashT].totalBasis = int(UserMap[hashT].totalBasis) + int(amountNew);\n//             UserMap[hashF].active = false;\n           \n//         }\n\n//         // Apply receiver-related tax if applicable\n//         if (RecieverTax.Contains(hashT) && UserMap[hashT].active) {\n//             uint amountNew = (IClassBase(SenderTaxMap[hashF].classAddress)).calculateTaxBasisPoints(from, to, caller);\n//             UserMap[hashT].totalBasis = int(UserMap[hashT].totalBasis) + int(amountNew);\n//             UserMap[hashT].active = false;\n//         }\n\n//         // Apply staking-related tax if applicable\n//         if ((UserMap[hashF].active)) {\n//             uint amountNew = (IClassBase(StakingTaxMap[hashF].classAddress)).calculateTaxBasisPoints(from, to, caller);\n//             UserMap[hashF].totalBasis = int(UserMap[hashT].totalBasis) + int(amountNew);\n//             UserMap[hashF].active = false;\n//         }\n//         else if((UserMap[hashT].active)){\n//             uint amountNew =  (IClassBase(StakingTaxMap[hashT].classAddress)).calculateTaxBasisPoints(from, to, caller);\n//             UserMap[hashT].totalBasis = int(UserMap[hashT].totalBasis) + int(amountNew);\n//             UserMap[hashT].active = false;\n\n//         }\n\n//         // Ensure the total tax basis points are non-negative\n//         return totalBasisPoints < 0 ? 0 : uint256(totalBasisPoints);\n//     }\n\n//     // Functions to check if the number of tax calculators has changed, update the count, and retrieve the running total\n\n\n\n//     function processTransaction(address from, address to, address spender, uint amount) external  returns (int) {\n//         assert(HasAccess(msg.sender, AccessType.CONTRACT, address(this)));\n//       uint hashIn = address(this).hashWith(spender);\n//     //    if(!userList[hashIn]){\n//     //     updateUser(caller);\n//     //     userList[hashIn] = true;\n\n//     //    }\n\n//       _calculateSelectiveTaxBasisPoints(from, to, spender);\n\n//       int taxBasisPoints =  UserMap[hashIn].totalBasis;\n   \n//         classreg.unpdateClasses();       \n\n     \n      \n         \n//                 console.logInt(taxBasisPoints);\n//             if(taxBasisPoints >= 5000) {\n                \n//                 return 4500;\n//             }\n//             if(taxBasisPoints <= 0) {\n//                 return 10;\n//             }\n//             return taxBasisPoints;\n//        // }\n//        // return 5000;\n//     }\n\n\n\n\n  \n  \n// }\n\n\n   \n\n\n\n\n\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 100
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"errors": [
			{
				"component": "general",
				"errorCode": "3420",
				"formattedMessage": "Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.26;\"\n--> contracts/TUSDRegistry.sol\n\n",
				"message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.26;\"",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "contracts/TUSDRegistry.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/TUSDRegistry.sol": {
				"ast": {
					"absolutePath": "contracts/TUSDRegistry.sol",
					"exportedSymbols": {},
					"id": 1,
					"license": "Sharia",
					"nodeType": "SourceUnit",
					"nodes": [],
					"src": "8579:0:0"
				},
				"id": 0
			}
		}
	}
}